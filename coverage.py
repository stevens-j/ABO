#! /usr/bin/env python3
# coverage.py

"""

"""

import os


def main():
    """

    :return:
    """
    # path to text file containing sample file names
    file_of_depth_files = "/Users/jonathan_stevens/ABO/depth_out.txt"
    # create list of sample file names
    file_list = create_list_of_depth_files(file_of_depth_files)
    # create dictionary of sample keys with average binned depth list keys
    sample_list, depth_dict = process_files_from_list(file_list)
    header_line = create_file_headers()
    out_file = '1000G_100bp_avg_read_depth_of_coverage.txt'
    print_data_2_file(out_file, header_line, sample_list, depth_dict)


def create_list_of_depth_files(text_file):
    """

    :param text_file:
    :return:
    """
    file_list = list()
    with open(text_file, 'r') as tf:
        for line in tf:
            line = line.strip()
            file_list.append(line)
    return file_list


def process_files_from_list(file_list):
    """

    :param file_list:
    :return:
    """
    sample_list = list()
    depth_dict = dict()
    for file in file_list:
        sample_name = file.split('_')[0]
        sample_list.append(sample_name)
        basepath = '/Users/jonathan_stevens/ABO/1000G_data/depth/'
        file_path = os.path.join(basepath, file)
        file_handle = open(file_path, 'r')
        sample_depth_list = _get_depth_list(file_handle)
        file_handle.close()
        binned_depth_list = _bin_depth_list(sample_depth_list)
        avg_depth_per_bin = _avg_depth_per_bin(binned_depth_list)
        depth_dict[sample_name] = avg_depth_per_bin
    return sample_list, depth_dict


def _get_depth_list(file_handle):
    """
    Creates a depth of coverage list from a file generated by the samtools
    depth command
    :param file_handle: text file of position depths
    :return: sample_depth_list, a list of depths from file
    """
    sample_depth_list = list()
    for line in file_handle:
        line = line.split()
        sample_depth_list.append(int(line[2]))
    return sample_depth_list


def _bin_depth_list(sample_depth_list):
    """
    Splits a list into 100 element lists
    :param sample_depth_list: list of elements
    :return: list of 100 element lists
    """
    binned_depth_list = list()
    for i in range(0, len(sample_depth_list), 100):
        binned_depth_list.append(sample_depth_list[i:i + 100])
    return binned_depth_list


def _avg_depth_per_bin(binned_depth_list):
    """
    Calculates the average depth per bin
    :param binned_depth_list: list of depths per 100
    :return: list of average depths per 100
    """
    avg_depth_per_bin = list()
    for bin in binned_depth_list:
        avg_depth_per_bin.append(round(sum(bin) / len(bin)))
    return avg_depth_per_bin


def create_file_headers():
    header_line = list()
    header_line.append("Sample")
    for i in range(133255176, 133385146, 100):
        header_line.append(f'chr9:{i}')
    return header_line


def print_data_2_file(out_file, header_line, sample_list, depth_dict):
    """

    :param out_file:
    :param header_line:
    :param sample_list:
    :param depth_dict:
    :return:
    """
    with open(out_file, 'w') as fh:
        header_line_joined = "\t".join(header_line)
        fh.write(f'{header_line_joined}\n')
        for sample in sample_list:
            coverage = '\t'.join(str(i) for i in depth_dict[sample])
            sample_line = '\t'.join((sample, coverage))
            fh.write(f'{sample_line}\n')


if __name__ == "__main__":
    main()
